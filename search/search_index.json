{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-great-expectations","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>Prefect Collection containing integrations for interacting with Great Expectations</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-great-expectations</code> with <code>pip</code>:</p> <pre><code>pip install prefect-great-expectations\n</code></pre>"},{"location":"#write-and-run-a-flow","title":"Write and run a flow","text":"<pre><code>from prefect import flow\nfrom prefect_great_expectations import run_checkpoint_validation\n\n\n@flow\ndef example_flow():\n   run_checkpoint_validation(checkpoint_name=\"my_checkpoint\")\n\nexample_flow()\n</code></pre>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter any bugs while using <code>prefect-great-expectations</code>, feel free to open an issue in the prefect-great-expectations repository.</p> <p>If you have any questions or issues while using <code>prefect-great-expectations</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to \u2b50\ufe0f or watch <code>prefect-great-expectations</code> for updates too!</p>"},{"location":"#development","title":"Development","text":"<p>If you'd like to install a version of <code>prefect-great-expectations</code> for development, clone the repository and perform an editable install with <code>pip</code>:</p> <pre><code>git clone https://github.com/PrefectHQ/prefect-great-expectations.git\n\ncd prefect-great-expectations/\n\npip install -e \".[dev]\"\n\n# Install linting pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"validation/","title":"Validation","text":""},{"location":"validation/#prefect_great_expectations.validation","title":"<code>prefect_great_expectations.validation</code>","text":"<p>Tasks for performing Great Expectations validations</p>"},{"location":"validation/#prefect_great_expectations.validation.GreatExpectationValidationError","title":"<code>GreatExpectationValidationError</code>","text":"<p>Signals that a task failed due to a failed Great Expectations validation.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CheckpointResult</code> <p>A CheckpointResult containing details of the failed validation.</p> required Source code in <code>prefect_great_expectations/validation.py</code> <pre><code>class GreatExpectationValidationError(Exception):\n\"\"\"\n    Signals that a task failed due to a failed Great\n    Expectations validation.\n\n    Args:\n        result: A CheckpointResult containing details\n            of the failed validation.\n    \"\"\"\n\n    def __init__(self, result: CheckpointResult):\n        self.result = result\n        super().__init__(\n            \"Great Expectations Validation failed. \"\n            \"Check result on this exception for more details.\"\n        )\n</code></pre>"},{"location":"validation/#prefect_great_expectations.validation.run_checkpoint_validation","title":"<code>run_checkpoint_validation</code>","text":"<p>Task that performs a Great Expectations validation based on the provided checkpoint     and data context.</p> <p>Parameters:</p> Name Type Description Default <code>run_name</code> <code>Optional[str]</code> <p>The name of the Great Expectations validation run. Defaults to timestamp if not provided.</p> <code>None</code> <code>checkpoint_name</code> <code>Optional[str]</code> <p>The name of the Checkpoint to use for validation.</p> <code>None</code> <code>checkpoint</code> <code>Optional[Checkpoint]</code> <p>A Checkpoint object to use for validation. Overrides <code>checkpoint_name</code> if both are provided.</p> <code>None</code> <code>checkpoint_kwargs</code> <code>Optional[Dict]</code> <p>A dictionary with values used to provide configuration to the task's Checkpint at runtime. Keys should match the parameters of <code>CheckpointConfig</code>.</p> <code>None</code> <code>data_context_root_dir</code> <code>Optional[Union[str, Path]]</code> <p>Path to the great_expectations directory.</p> <code>None</code> <code>data_context</code> <code>Optional[DataContext]</code> <p>A DataContext object to use during validation. Overrides <code>data_context_root_dir</code> if both are provided.</p> <code>None</code> <code>runtime_environment</code> <code>Optional[Dict]</code> <p>A dictionary with values to overwrite config in <code>great_expectations.yml</code> at run time.</p> <code>None</code> <code>raise_on_validation_failure</code> <code>bool</code> <p>If <code>True</code>, the task will raise a GreatExpectationValidationError when validation fails. If <code>False</code>, the task will return the result of the validation.</p> <code>True</code> <p>Raises:</p> Type Description <code>GreatExpectationValidationError</code> <p>Signals that a GE validation failed. Details of the failure can be found by inspecting the <code>result</code> attribute of the exception.</p> <p>Returns:</p> Name Type Description <code>CheckpointResult</code> <p>Detailed result of the validation run in the task.</p> <p>Examples:</p> <p>Run a validation with a checkpoint named 'my_checkpoint':</p> <pre><code>from prefect import flow\nfrom prefect_great_expectations import run_checkpoint_validation\n\n\n@flow\ndef example_flow():\n    run_checkpoint_validation(checkpoint_name=\"my_checkpoint\")\n\nexample_flow()\n</code></pre> <p>Run a validation with a custom path to the data context:</p> <pre><code>from prefect import flow\nfrom prefect_great_expectations import run_checkpoint_validation\n\n\n@flow\ndef example_flow():\n    run_checkpoint_validation(\n        checkpoint_name=\"my_checkpoint\",\n        data_context_root_dir=\"my_data_context/\"\n    )\n\nexample_flow()\n</code></pre> Source code in <code>prefect_great_expectations/validation.py</code> <pre><code>@task\ndef run_checkpoint_validation(\n    run_name: Optional[str] = None,\n    checkpoint_name: Optional[str] = None,\n    checkpoint: Optional[Checkpoint] = None,\n    checkpoint_kwargs: Optional[Dict] = None,\n    data_context_root_dir: Optional[Union[str, Path]] = None,\n    data_context: Optional[DataContext] = None,\n    runtime_environment: Optional[Dict] = None,\n    raise_on_validation_failure: bool = True,\n):\n\"\"\"\n    Task that performs a Great Expectations validation based on the provided checkpoint\n        and data context.\n\n    Args:\n        run_name: The name of the Great Expectations validation run. Defaults to\n            timestamp if not provided.\n        checkpoint_name: The name of the Checkpoint to use for validation.\n        checkpoint: A Checkpoint object to use for validation. Overrides\n            `checkpoint_name` if both are provided.\n        checkpoint_kwargs: A dictionary with values used to provide configuration to\n            the task's Checkpint at runtime. Keys should match the parameters of\n            `CheckpointConfig`.\n        data_context_root_dir: Path to the great_expectations directory.\n        data_context: A DataContext object to use during validation. Overrides\n            `data_context_root_dir` if both are provided.\n        runtime_environment: A dictionary with values to overwrite config in\n            `great_expectations.yml` at run time.\n        raise_on_validation_failure: If `True`, the task will raise a\n            GreatExpectationValidationError when validation fails. If `False`,\n            the task will return the result of the validation.\n\n    Raises:\n        GreatExpectationValidationError: Signals that a GE validation failed.\n            Details of the failure can be found by inspecting the `result`\n            attribute of the exception.\n\n    Returns:\n        CheckpointResult: Detailed result of the validation run in the task.\n\n    Examples:\n        Run a validation with a checkpoint named 'my_checkpoint':\n\n        ```python\n        from prefect import flow\n        from prefect_great_expectations import run_checkpoint_validation\n\n\n        @flow\n        def example_flow():\n            run_checkpoint_validation(checkpoint_name=\"my_checkpoint\")\n\n        example_flow()\n        ```\n\n        Run a validation with a custom path to the data context:\n\n        ```python\n        from prefect import flow\n        from prefect_great_expectations import run_checkpoint_validation\n\n\n        @flow\n        def example_flow():\n            run_checkpoint_validation(\n                checkpoint_name=\"my_checkpoint\",\n                data_context_root_dir=\"my_data_context/\"\n            )\n\n        example_flow()\n        ```\n    \"\"\"\n    logger = get_run_logger()\n\n    logger.info(\"Running Great Expectations validation...\")\n\n    runtime_environment = runtime_environment or {}\n    checkpoint_kwargs = checkpoint_kwargs or {}\n\n    data_context_root_dir = (\n        str(data_context_root_dir) if data_context_root_dir else None\n    )\n\n    if data_context:\n        logger.debug(\"Using provided GE Data Context\")\n    else:\n        logger.debug(\"Loading GE Data Context from %s\", data_context_root_dir)\n        data_context = DataContext(\n            context_root_dir=data_context_root_dir,\n            runtime_environment=runtime_environment,\n        )\n\n    if checkpoint:\n        logger.debug(\"Using provided GE Checkpoint\")\n    else:\n        logger.debug(\"Loading GE Checkpoint with name %s\", checkpoint_name)\n        checkpoint = data_context.get_checkpoint(checkpoint_name)\n\n    result = checkpoint.run(run_name=run_name, **checkpoint_kwargs)\n\n    if not result.success:\n        logger.warn(\n            \"Great Expectations validation run %s failed\", result.run_id.run_name\n        )\n        if raise_on_validation_failure:\n            raise GreatExpectationValidationError(result)\n    else:\n        logger.info(\n            \"Great Expectations validation run %s succeeded\", result.run_id.run_name\n        )\n\n    return result\n</code></pre>"}]}