{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-great-expectations Welcome! Prefect Collection containing integrations for interacting with Great Expectations Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-great-expectations with pip : pip install prefect-great-expectations Then, register to view the block on Prefect Cloud: prefect block register -m prefect_great_expectations.credentials Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI . Write and run a flow from prefect import flow from prefect_great_expectations import run_checkpoint_validation @flow def example_flow (): run_checkpoint_validation ( checkpoint_name = \"my_checkpoint\" ) example_flow () Resources If you encounter any bugs while using prefect-great-expectations , feel free to open an issue in the prefect-great-expectations repository. If you have any questions or issues while using prefect-great-expectations , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-great-expectations for updates too! Development If you'd like to install a version of prefect-great-expectations for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-great-expectations.git cd prefect-great-expectations/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-great-expectations","text":"","title":"prefect-great-expectations"},{"location":"#welcome","text":"Prefect Collection containing integrations for interacting with Great Expectations","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-great-expectations with pip : pip install prefect-great-expectations Then, register to view the block on Prefect Cloud: prefect block register -m prefect_great_expectations.credentials Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI .","title":"Installation"},{"location":"#write-and-run-a-flow","text":"from prefect import flow from prefect_great_expectations import run_checkpoint_validation @flow def example_flow (): run_checkpoint_validation ( checkpoint_name = \"my_checkpoint\" ) example_flow ()","title":"Write and run a flow"},{"location":"#resources","text":"If you encounter any bugs while using prefect-great-expectations , feel free to open an issue in the prefect-great-expectations repository. If you have any questions or issues while using prefect-great-expectations , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-great-expectations for updates too!","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-great-expectations for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-great-expectations.git cd prefect-great-expectations/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"validation/","text":"prefect_great_expectations.validation Tasks for performing Great Expectations validations GreatExpectationValidationError Signals that a task failed due to a failed Great Expectations validation. Parameters: Name Type Description Default result CheckpointResult A CheckpointResult containing details of the failed validation. required Source code in prefect_great_expectations/validation.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class GreatExpectationValidationError ( Exception ): \"\"\" Signals that a task failed due to a failed Great Expectations validation. Args: result: A CheckpointResult containing details of the failed validation. \"\"\" def __init__ ( self , result : CheckpointResult ): self . result = result super () . __init__ ( \"Great Expectations Validation failed. \" \"Check result on this exception for more details.\" ) run_checkpoint_validation Task that performs a Great Expectations validation based on the provided checkpoint and data context. Parameters: Name Type Description Default run_name Optional [ str ] The name of the Great Expectations validation run. Defaults to timestamp if not provided. None checkpoint_name Optional [ str ] The name of the Checkpoint to use for validation. None checkpoint Optional [ Checkpoint ] A Checkpoint object to use for validation. Overrides checkpoint_name if both are provided. None checkpoint_kwargs Optional [ Dict ] A dictionary with values used to provide configuration to the task's Checkpint at runtime. Keys should match the parameters of CheckpointConfig . None data_context_root_dir Optional [ Union [ str , Path ]] Path to the great_expectations directory. None data_context Optional [ DataContext ] A DataContext object to use during validation. Overrides data_context_root_dir if both are provided. None runtime_environment Optional [ Dict ] A dictionary with values to overwrite config in great_expectations.yml at run time. None raise_on_validation_failure bool If True , the task will raise a GreatExpectationValidationError when validation fails. If False , the task will return the result of the validation. True Raises: Type Description GreatExpectationValidationError Signals that a GE validation failed. Details of the failure can be found by inspecting the result attribute of the exception. Returns: Name Type Description CheckpointResult Detailed result of the validation run in the task. Examples: Run a validation with a checkpoint named 'my_checkpoint': from prefect import flow from prefect_great_expectations import run_checkpoint_validation @flow def example_flow (): run_checkpoint_validation ( checkpoint_name = \"my_checkpoint\" ) example_flow () Run a validation with a custom path to the data context: from prefect import flow from prefect_great_expectations import run_checkpoint_validation @flow def example_flow (): run_checkpoint_validation ( checkpoint_name = \"my_checkpoint\" , data_context_root_dir = \"my_data_context/\" ) example_flow () Source code in prefect_great_expectations/validation.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 @task def run_checkpoint_validation ( run_name : Optional [ str ] = None , checkpoint_name : Optional [ str ] = None , checkpoint : Optional [ Checkpoint ] = None , checkpoint_kwargs : Optional [ Dict ] = None , data_context_root_dir : Optional [ Union [ str , Path ]] = None , data_context : Optional [ DataContext ] = None , runtime_environment : Optional [ Dict ] = None , raise_on_validation_failure : bool = True , ): \"\"\" Task that performs a Great Expectations validation based on the provided checkpoint and data context. Args: run_name: The name of the Great Expectations validation run. Defaults to timestamp if not provided. checkpoint_name: The name of the Checkpoint to use for validation. checkpoint: A Checkpoint object to use for validation. Overrides `checkpoint_name` if both are provided. checkpoint_kwargs: A dictionary with values used to provide configuration to the task's Checkpint at runtime. Keys should match the parameters of `CheckpointConfig`. data_context_root_dir: Path to the great_expectations directory. data_context: A DataContext object to use during validation. Overrides `data_context_root_dir` if both are provided. runtime_environment: A dictionary with values to overwrite config in `great_expectations.yml` at run time. raise_on_validation_failure: If `True`, the task will raise a GreatExpectationValidationError when validation fails. If `False`, the task will return the result of the validation. Raises: GreatExpectationValidationError: Signals that a GE validation failed. Details of the failure can be found by inspecting the `result` attribute of the exception. Returns: CheckpointResult: Detailed result of the validation run in the task. Examples: Run a validation with a checkpoint named 'my_checkpoint': ```python from prefect import flow from prefect_great_expectations import run_checkpoint_validation @flow def example_flow(): run_checkpoint_validation(checkpoint_name=\"my_checkpoint\") example_flow() ``` Run a validation with a custom path to the data context: ```python from prefect import flow from prefect_great_expectations import run_checkpoint_validation @flow def example_flow(): run_checkpoint_validation( checkpoint_name=\"my_checkpoint\", data_context_root_dir=\"my_data_context/\" ) example_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Running Great Expectations validation...\" ) runtime_environment = runtime_environment or {} checkpoint_kwargs = checkpoint_kwargs or {} data_context_root_dir = ( str ( data_context_root_dir ) if data_context_root_dir else None ) if data_context : logger . debug ( \"Using provided GE Data Context\" ) else : logger . debug ( \"Loading GE Data Context from %s \" , data_context_root_dir ) data_context = DataContext ( context_root_dir = data_context_root_dir , runtime_environment = runtime_environment , ) if checkpoint : logger . debug ( \"Using provided GE Checkpoint\" ) else : logger . debug ( \"Loading GE Checkpoint with name %s \" , checkpoint_name ) checkpoint = data_context . get_checkpoint ( checkpoint_name ) result = checkpoint . run ( run_name = run_name , ** checkpoint_kwargs ) if not result . success : logger . warn ( \"Great Expectations validation run %s failed\" , result . run_id . run_name ) if raise_on_validation_failure : raise GreatExpectationValidationError ( result ) else : logger . info ( \"Great Expectations validation run %s succeeded\" , result . run_id . run_name ) return result","title":"Validation"},{"location":"validation/#prefect_great_expectations.validation","text":"Tasks for performing Great Expectations validations","title":"validation"},{"location":"validation/#prefect_great_expectations.validation.GreatExpectationValidationError","text":"Signals that a task failed due to a failed Great Expectations validation. Parameters: Name Type Description Default result CheckpointResult A CheckpointResult containing details of the failed validation. required Source code in prefect_great_expectations/validation.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class GreatExpectationValidationError ( Exception ): \"\"\" Signals that a task failed due to a failed Great Expectations validation. Args: result: A CheckpointResult containing details of the failed validation. \"\"\" def __init__ ( self , result : CheckpointResult ): self . result = result super () . __init__ ( \"Great Expectations Validation failed. \" \"Check result on this exception for more details.\" )","title":"GreatExpectationValidationError"},{"location":"validation/#prefect_great_expectations.validation.run_checkpoint_validation","text":"Task that performs a Great Expectations validation based on the provided checkpoint and data context. Parameters: Name Type Description Default run_name Optional [ str ] The name of the Great Expectations validation run. Defaults to timestamp if not provided. None checkpoint_name Optional [ str ] The name of the Checkpoint to use for validation. None checkpoint Optional [ Checkpoint ] A Checkpoint object to use for validation. Overrides checkpoint_name if both are provided. None checkpoint_kwargs Optional [ Dict ] A dictionary with values used to provide configuration to the task's Checkpint at runtime. Keys should match the parameters of CheckpointConfig . None data_context_root_dir Optional [ Union [ str , Path ]] Path to the great_expectations directory. None data_context Optional [ DataContext ] A DataContext object to use during validation. Overrides data_context_root_dir if both are provided. None runtime_environment Optional [ Dict ] A dictionary with values to overwrite config in great_expectations.yml at run time. None raise_on_validation_failure bool If True , the task will raise a GreatExpectationValidationError when validation fails. If False , the task will return the result of the validation. True Raises: Type Description GreatExpectationValidationError Signals that a GE validation failed. Details of the failure can be found by inspecting the result attribute of the exception. Returns: Name Type Description CheckpointResult Detailed result of the validation run in the task. Examples: Run a validation with a checkpoint named 'my_checkpoint': from prefect import flow from prefect_great_expectations import run_checkpoint_validation @flow def example_flow (): run_checkpoint_validation ( checkpoint_name = \"my_checkpoint\" ) example_flow () Run a validation with a custom path to the data context: from prefect import flow from prefect_great_expectations import run_checkpoint_validation @flow def example_flow (): run_checkpoint_validation ( checkpoint_name = \"my_checkpoint\" , data_context_root_dir = \"my_data_context/\" ) example_flow () Source code in prefect_great_expectations/validation.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 @task def run_checkpoint_validation ( run_name : Optional [ str ] = None , checkpoint_name : Optional [ str ] = None , checkpoint : Optional [ Checkpoint ] = None , checkpoint_kwargs : Optional [ Dict ] = None , data_context_root_dir : Optional [ Union [ str , Path ]] = None , data_context : Optional [ DataContext ] = None , runtime_environment : Optional [ Dict ] = None , raise_on_validation_failure : bool = True , ): \"\"\" Task that performs a Great Expectations validation based on the provided checkpoint and data context. Args: run_name: The name of the Great Expectations validation run. Defaults to timestamp if not provided. checkpoint_name: The name of the Checkpoint to use for validation. checkpoint: A Checkpoint object to use for validation. Overrides `checkpoint_name` if both are provided. checkpoint_kwargs: A dictionary with values used to provide configuration to the task's Checkpint at runtime. Keys should match the parameters of `CheckpointConfig`. data_context_root_dir: Path to the great_expectations directory. data_context: A DataContext object to use during validation. Overrides `data_context_root_dir` if both are provided. runtime_environment: A dictionary with values to overwrite config in `great_expectations.yml` at run time. raise_on_validation_failure: If `True`, the task will raise a GreatExpectationValidationError when validation fails. If `False`, the task will return the result of the validation. Raises: GreatExpectationValidationError: Signals that a GE validation failed. Details of the failure can be found by inspecting the `result` attribute of the exception. Returns: CheckpointResult: Detailed result of the validation run in the task. Examples: Run a validation with a checkpoint named 'my_checkpoint': ```python from prefect import flow from prefect_great_expectations import run_checkpoint_validation @flow def example_flow(): run_checkpoint_validation(checkpoint_name=\"my_checkpoint\") example_flow() ``` Run a validation with a custom path to the data context: ```python from prefect import flow from prefect_great_expectations import run_checkpoint_validation @flow def example_flow(): run_checkpoint_validation( checkpoint_name=\"my_checkpoint\", data_context_root_dir=\"my_data_context/\" ) example_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Running Great Expectations validation...\" ) runtime_environment = runtime_environment or {} checkpoint_kwargs = checkpoint_kwargs or {} data_context_root_dir = ( str ( data_context_root_dir ) if data_context_root_dir else None ) if data_context : logger . debug ( \"Using provided GE Data Context\" ) else : logger . debug ( \"Loading GE Data Context from %s \" , data_context_root_dir ) data_context = DataContext ( context_root_dir = data_context_root_dir , runtime_environment = runtime_environment , ) if checkpoint : logger . debug ( \"Using provided GE Checkpoint\" ) else : logger . debug ( \"Loading GE Checkpoint with name %s \" , checkpoint_name ) checkpoint = data_context . get_checkpoint ( checkpoint_name ) result = checkpoint . run ( run_name = run_name , ** checkpoint_kwargs ) if not result . success : logger . warn ( \"Great Expectations validation run %s failed\" , result . run_id . run_name ) if raise_on_validation_failure : raise GreatExpectationValidationError ( result ) else : logger . info ( \"Great Expectations validation run %s succeeded\" , result . run_id . run_name ) return result","title":"run_checkpoint_validation()"}]}